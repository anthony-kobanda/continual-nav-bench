import numpy as np
import os
import pickle

from offbench.core.logger import Logger
from offbench.utils.data import convert_cfg
from torch.utils.tensorboard import SummaryWriter
from typing import Dict, List, Tuple, Union



class TensorBoardLogger(Logger):

    """
    A logger that logs to TensorBoard.

    Args:
        directory (str): The directory to log to.
        prefix (str): The prefix to add to all logs.
        max_cache_size (int): The maximum cache size before flushing.
    """

    def __init__(self,directory:str,prefix:str=None,max_cache_size:int=1000) -> None:
        self._directory: str = directory
        self._prefix: str = prefix + "/" if prefix else ""
        self._max_cache_size: int = max_cache_size
        os.makedirs(self._directory,exist_ok=True)
        self._logger: SummaryWriter = SummaryWriter(log_dir=self._directory)
        self._cache: List[Tuple[str,Union[np.ndarray,int,float,str],int]] = []

    def log_params(self,params:Dict,directory:str=None) -> None:
        """
        Save the parameters to disk.

        Args:
            params (dict): The parameters to log.
            directory (str): The directory to log the parameters to. If None, log to the default directory. Default is None.
        
        Returns:
            (None): Nothing.
        """
        if directory is None: log_directory = self._directory
        else: log_directory = directory
        with open(f"{log_directory}/params.pickle","wb") as file:
            pickle.dump(convert_cfg(params),file)
    
    def add_histogram(self,tag:str,values:np.ndarray,step:int):
        """
        Log a histogram to TensorBoard.

        Args:
            tag (str): The tag for the histogram.
            values (np.ndarray): The values to log as a histogram.
            step (int): The step for the histogram.
        """
        _tag = self._prefix + tag
        self._logger.add_histogram(_tag, values, step)
        self._cache.append((_tag, values, step))
        if len(self._cache) > self._max_cache_size: self._flush()

    def add_image(self,tag:str,image:np.ndarray,step:int) -> None:
        """
        Log an image to TensorBoard.

        Args:
            tag (str): The tag for the image.
            step (int): The step for the image.
            image (np.ndarray): The image to add.
        
        Returns:
            (None): Nothing.
        """
        _tag = self._prefix + tag
        self._logger.add_image(_tag, image, step)
        self._cache.append((_tag, image, step))
        if len(self._cache) > self._max_cache_size: self._flush()

    def add_scalar(self,tag:str,value:Union[int,float],step:int) -> None:
        """
        Log a scalar to TensorBoard.

        Args:
            tag (str): The tag for the scalar.
            step (int): The step for the scalar.
            value (Union[int, float]): The value to add.
        
        Returns:
            (None): Nothing.
        """
        _tag = self._prefix + tag
        self._logger.add_scalar(_tag, value, step)
        self._cache.append((_tag, value, step))
        if len(self._cache) > self._max_cache_size: self._flush()

    def add_text(self,tag:str,text:str,step:int) -> None:
        """
        Log text to TensorBoard.

        Args:
            tag (str): The tag for the text.
            step (int): The step for the text.
            text (str): The text to add.
        
        Returns:
            (None): Nothing.
        """
        _tag = self._prefix + tag
        self._logger.add_text(_tag, text, step)
        self._cache.append((_tag, text, step))
        if len(self._cache) > self._max_cache_size: self._flush()

    def close(self) -> None:
        """
        Close the logger.
        
        Returns:
            (None): Nothing.
        """
        self._flush()
        if not self._logger is None: 
            self._logger.close()

    def _flush(self) -> None:
        """
        Flush the cache to disk.
        
        Returns:
            (None): Nothing.
        """
        if len(self._cache) > 0:
            with open(f"{self._logger.log_dir}/values.pickle","ab") as file:
                pickle.dump(self._cache,file)
            self._cache = []

    def __del__(self) -> None:
        """
        Destructor for the logger.
        
        Returns:
            (None): Nothing.
        """
        self.close()

    def delete_tf_events(self) -> None:
        """
        Delete the .tf.events file generated by TensorBoard.
        
        Returns:
            (None): Nothing.
        """
        for file in os.listdir(self._logger.log_dir):
            if "events.out.tfevents" in file:
                os.remove(f"{self._logger.log_dir}/{file}")
